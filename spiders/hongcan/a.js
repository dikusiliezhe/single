var CryptoJS = require("/Users/admin/Downloads/single_process/js/rs_server/node_modules/crypto-js")
// var privateKey = 'gmggzytogy202104'
// var ciphertext = ""
// function decryptByDESModeEBC(ciphertext){
//             var keyHex = CryptoJS.enc.Utf8.parse(privateKey);
//             var decrypted = CryptoJS.DES.decrypt({
//                 ciphertext: CryptoJS.enc.Hex.parse(ciphertext)
//             }, keyHex, {
//                 mode: CryptoJS.mode.ECB,
//                 padding: CryptoJS.pad.Pkcs7
//             });
//             var result_value = decrypted.toString(CryptoJS.enc.Utf8);
//             return result_value;
//         }
// var d = '7xtZ8ieD7jGmduht'
// var m = 'Mrm2L0qxAqy8DcZS'
// var t
// var n = ""
// function aes() {
//                     var i = CryptoJS.AES.decrypt(n, CryptoJS.enc.Utf8.parse(d), {
//                         iv: CryptoJS.enc.Utf8.parse(m),
//                         mode: CryptoJS.mode.CBC
//                     }).toString(CryptoJS.enc.Utf8);
//                     t = JSON.parse(i)
//                     return t
//                 }
// console.log(aes())



var s = 'MIGfMA0GCSqGSIb3'

// var cper = 'RmRpOG5XOXlSaGUrSk9jcFBtVmFHbGxkNVpqdm9HNy9XbWtwOVlST3NkODRCbGlQajFJQTAvZGUrLzMrV29Vc3RMTHowQ0JhUjQrN2gxNHAvRG9vQWNQWVdoOVZ4QndJSVdIN0tta0pWTmU0K3IzblYwOEt5QWs4L3graUR4blRSQzY5NzBDYjBwZzJtYlVTeHdBVHQ3RzFVa1k3VUVJVlVYbDgvWUEvNFZ3YlAxNnRWTjVhV20rYlJWTWR4dDVmTHduVkJienFzaGJhemR6TS80VTk1Wnd2VEcyYmp0aWc4WWE2WktXNGlhVnBSNUVhVHJVYkZGem9zM3ZHa05iMg%3D%3D'
// var cper = 'NzE3VEE4aytpZ2diUHgxekhRR3VRaDFqUUVjOFJ3WGRCQmxOK3l4a3JZYy91bWcrVEJiUGpYejJaUzFNR3JnWEZnZU01RVQxWE5Pd2lieTN6QkNBQ3BjMnVNMElXaW52aDRvaTZHZ2VRdnZ2aitVeUw4TE1GSXpjSFc0NnU2TzhzYnVPbkVIMnZMSjA5N3NTTEhMaWJ0UjNpOElmMGJxSCsvZm1Ea1plSGF3SXZQNmJ6Qks2R003NXF5UndBMml3'
// var cper = '717TA8k+iggbPx1zHQGuQh1jQEc8RwXdBBlN+yxkrYdmGo/nAtCXn4Gra89vTplLjGHzgFN7rgp9Z5PNRUtjXdN+AWYdu5WCoE/1FI11O7wEM3etKRTn6L0I1M0KLaC+sbuOnEH2vLJ097sSLHLibixWBO6dE+bNVl8jZW5CJs4IvP6bzBK6GM75qyRwA2iw'
// var cper = 's/tuUoO3NOv7RHIsfniKxXbC1YFuustTm8FWylYejHxmGo/nAtCXn4Gra89vTplLjGHzgFN7rgp9Z5PNRUtjXYhGfaTJJ0xZKBllzu11224jXSJwm9F9BBl5fr3M6291jwdUBQTUdHnG6kEhwBlMwSzj8CfmDueG56U8ZxBAOQUIvP6bzBK6GM75qyRwA2iw'
// var cper = 'pkXWMX4uGw0oslVl7psNuZAeVNBr6ZEQQAreRlieJQRhkD9TCo8NFK+/9PHv0MGjT4jfoltJsUDvogQYz+FQlw=='
// var cper = '717TA8k+iggbPx1zHQGuQhofSBSuRxf1tiMkEIOe0z0A1pGgasgf0hT5ntGmFGSQT4jfoltJsUDvogQYz+FQlw=='
// var cper = '717TA8k+iggbPx1zHQGuQmnMvFHqKusv9CAipTa1D533NnL3exsENB5sLtxLK8qWa9efkmX3V5VJEK/EFlAVcgJ4Q0YTjB8rZHpngDJg3Uy2nJHqLoeuK2q3QANGTzEdaUeRGk61GxRc6LN7xpDW9g=='
// var cper = '8ibhZcJakMetDcnOTXBXzvNSIqjl2SCYujZBzj9I0NuRTjUQQ6z4rUy9SylWjVuYRdR9OOlZfrvbDC/0qf3eHrBEC8lr7rOEEHlj2n9YnkXH01WYDPRpO8WjfHPTwcMRjJogWPVMOK9cSx0xd8aYmw=='
var cper = 'Vevk7MXwSNecC6bqtaOmQt9lNP41yja7zy8NNpCYJ0C0svPQIFpHj7uHXin8OigBwr0DCEcwtBu9IcVl+5Iq61LEWuWVTQtzKt2csH9QPennykUuopSKtxKHIG4a330g83fwBQ262147dmjaYY0BZg=='



function decryptWithAES(ciphertext, key) {
    ciphertext = decodeURIComponent(ciphertext)
  // Convert key from string to WordArray
  var keyBytes = CryptoJS.enc.Utf8.parse(key);

  // Decrypt ciphertext using ECB mode and PKCS7 padding
  var decrypted = CryptoJS.AES.decrypt(
    { ciphertext: CryptoJS.enc.Base64.parse(ciphertext) },
    keyBytes,
    { mode: CryptoJS.mode.ECB, padding: CryptoJS.pad.Pkcs7 }
  );

  // Convert decrypted data to a UTF-8 string
  var plaintexts = decrypted.toString(CryptoJS.enc.Utf8);
  return plaintexts;
}


// 示例用法
var ciphertext = cper;
var key = "MIGfMA0GCSqGSIb3";
var plaintext = decryptWithAES(ciphertext, key);

console.log(plaintext);






function encryptWithAES(plaintext) {
    key =  "MIGfMA0GCSqGSIb3"
  // Convert key from string to WordArray
  var keyBytes = CryptoJS.enc.Utf8.parse(key);

  // Encrypt plaintext using ECB mode and PKCS7 padding
  var encrypted = CryptoJS.AES.encrypt(
    plaintext,
    keyBytes,
    { mode: CryptoJS.mode.ECB, padding: CryptoJS.pad.Pkcs7 }
  );

  // Get the ciphertext in base64 format
  var ciphertext = encrypted.ciphertext.toString(CryptoJS.enc.Base64);
    var urlc =  base64Encode(ciphertext)
    var urlcc = encodeURIComponent(urlc)

  return urlcc;
}

function base64Encode(text) {
  var utf8Text = unescape(encodeURIComponent(text));
  var base64Text = btoa(utf8Text);
  return base64Text;
}
// 示例用法
// var plaintext = "{\"master_type\":\"0\",\"second_type\":\"\",\"city_id\":\"\",\"province_id\":\"\",\"order_by\":\"store_count\",\"desc\":\"desc\",\"pagesize\":10,\"page\":4,\"keyword\":\"\",\"top_bg\":\"\"}&date=1689129053087&version=2";
// var plaintext = "{\"master_type\":\"0\",\"second_type\":\"\",\"city_id\":\"\",\"province_id\":\"\",\"order_by\":\"store_count\",\"desc\":\"desc\",\"pagesize\":10,\"page\":5,\"keyword\":\"\",\"top_bg\":\"\"}&date=1689131302733&version=2";
// var key = "MIGfMA0GCSqGSIb3";
// var ciphertext = encryptWithAES(plaintext, key);
//
// console.log(ciphertext);



//+++++++++++++++++++++++++++++++++++++++++++++++++++
// var setAseKey = CryptoJS.enc.Utf8.parse('m1xp9slgfa|su@m2');
// var setAseIv = CryptoJS.enc.Utf8.parse('pa!st17m@04h5u#0');


// function myDecrypt(word) {
//     var encryptedHexStr = CryptoJS.enc.Base64.parse(word)
//     var srcs = CryptoJS.enc.Base64.stringify(encryptedHexStr)
//     var decrypt = CryptoJS.AES.decrypt(srcs, setAseKey, {
//         iv: setAseIv,
//         mode: CryptoJS.mode.CBC,
//         padding: CryptoJS.pad.ZeroPadding })
//     var decryptedStr = decrypt.toString(CryptoJS.enc.Utf8)
//     // return decryptedStr
//     return JSON.parse(decryptedStr.toString())
// }
// console.log(aes())





// (function(t, a, c) {
//     "function" === typeof window.define && window.define.amd ? window.define(c) : "undefined" !== typeof module && module.exports ? module.exports = c() : a.exports ? a.exports = c() : a[t] = c()
// })("fe", this,
// function() {
//     var t = function(a) {
//         if (! (this instanceof t)) return new t(a);
//         this.options = this.extend(a, {
//             swfContainerId: "fingerprintjs2",
//             swfPath: "flash/compiled/FontList.swf",
//             detectScreenOrientation: !0,
//             sortPluginsFor: [/palemoon/i],
//             userDefinedFonts: []
//         });
//         this.nativeForEach = Array.prototype.forEach;
//         this.nativeMap = Array.prototype.map
//     };
//     t.prototype = {
//         extend: function(a, c) {
//             if (null == a) return c;
//             for (var b in a) null != a[b] && c[b] !== a[b] && (c[b] = a[b]);
//             return c
//         },
//         get: function(a) {
//             var c = this,
//             b = {
//                 data: [],
//                 addPreprocessedComponent: function(a) {
//                     var b = a.value;
//                     "function" === typeof c.options.preprocessor && (b = c.options.preprocessor(a.key, b));
//                     this.data.push({
//                         key: a.key,
//                         value: b
//                     })
//                 }
//             },
//             b = this.userAgentKey(b),
//             b = this.languageKey(b),
//             b = this.colorDepthKey(b),
//             b = this.deviceMemoryKey(b),
//             b = this.pixelRatioKey(b),
//             b = this.hardwareConcurrencyKey(b),
//             b = this.screenResolutionKey(b),
//             b = this.availableScreenResolutionKey(b),
//             b = this.timezoneOffsetKey(b),
//             b = this.platformKey(b),
//             b = this.pluginsKey(b),
//             b = this.canvasKey(b),
//             b = this.webglKey(b),
//             b = this.webglVendorAndRendererKey(b),
//             b = this.adBlockKey(b),
//             b = this.hasLiedLanguagesKey(b),
//             b = this.hasLiedResolutionKey(b),
//             b = this.hasLiedOsKey(b),
//             b = this.hasLiedBrowserKey(b),
//             b = this.touchSupportKey(b);
//             this.fontsKey(b,
//             function(b) {
//                 var e = c.x64hash128("", 31);
//                 return a(e, b.data)
//             })
//         },
//         userAgentKey: function(a) {
//             this.options.excludeUserAgent ? a.addPreprocessedComponent({
//                 key: "user_agent",
//                 value: "unknown"
//             }) : a.addPreprocessedComponent({
//                 key: "user_agent",
//                 value: this.getUserAgent()
//             });
//             return a
//         },
//         getUserAgent: function() {
//             return null != navigator.userAgent ? navigator.userAgent: "unknown"
//         },
//         languageKey: function(a) {
//             this.options.excludeLanguage ? a.addPreprocessedComponent({
//                 key: "language",
//                 value: "unknown"
//             }) : a.addPreprocessedComponent({
//                 key: "language",
//                 value: navigator.language || navigator.userLanguage || navigator.browserLanguage || navigator.systemLanguage || "unknown"
//             });
//             return a
//         },
//         colorDepthKey: function(a) {
//             this.options.excludeColorDepth ? a.addPreprocessedComponent({
//                 key: "color_depth",
//                 value: "unknown"
//             }) : a.addPreprocessedComponent({
//                 key: "color_depth",
//                 value: window.screen.colorDepth || -1
//             });
//             return a
//         },
//         deviceMemoryKey: function(a) {
//             this.options.excludeDeviceMemory ? a.addPreprocessedComponent({
//                 key: "device_memory",
//                 value: "unknown"
//             }) : a.addPreprocessedComponent({
//                 key: "device_memory",
//                 value: this.getDeviceMemory()
//             });
//             return a
//         },
//         getDeviceMemory: function() {
//             return navigator.deviceMemory || -1
//         },
//         pixelRatioKey: function(a) {
//             this.options.excludePixelRatio ? a.addPreprocessedComponent({
//                 key: "pixel_ratio",
//                 value: "unknown"
//             }) : a.addPreprocessedComponent({
//                 key: "pixel_ratio",
//                 value: this.getPixelRatio()
//             });
//             return a
//         },
//         getPixelRatio: function() {
//             return window.devicePixelRatio || "unknown"
//         },
//         screenResolutionKey: function(a) {
//             if (this.options.excludeScreenResolution) a.addPreprocessedComponent({
//                 key: "resolution",
//                 value: "unknown"
//             });
//             else return this.getScreenResolution(a);
//             return a
//         },
//         getScreenResolution: function(a) {
//             var c;
//             c = this.options.detectScreenOrientation ? window.screen.height > window.screen.width ? [window.screen.height, window.screen.width] : [window.screen.width, window.screen.height] : [window.screen.width, window.screen.height];
//             null != c ? a.addPreprocessedComponent({
//                 key: "resolution",
//                 value: c
//             }) : a.addPreprocessedComponent({
//                 key: "resolution",
//                 value: "unknown"
//             });
//             return a
//         },
//         availableScreenResolutionKey: function(a) {
//             if (this.options.excludeAvailableScreenResolution) a.addPreprocessedComponent({
//                 key: "available_resolution",
//                 value: "unknown"
//             });
//             else return this.getAvailableScreenResolution(a);
//             return a
//         },
//         getAvailableScreenResolution: function(a) {
//             var c = null;
//             window.screen.availWidth && window.screen.availHeight && (c = this.options.detectScreenOrientation ? window.screen.availHeight > window.screen.availWidth ? [window.screen.availHeight, window.screen.availWidth] : [window.screen.availWidth, window.screen.availHeight] : [window.screen.availHeight, window.screen.availWidth]);
//             null != c ? a.addPreprocessedComponent({
//                 key: "available_resolution",
//                 value: c
//             }) : a.addPreprocessedComponent({
//                 key: "available_resolution",
//                 value: "unknown"
//             });
//             return a
//         },
//         timezoneOffsetKey: function(a) {
//             this.options.excludeTimezoneOffset ? a.addPreprocessedComponent({
//                 key: "timezone_offset",
//                 value: "unknown"
//             }) : a.addPreprocessedComponent({
//                 key: "timezone_offset",
//                 value: (new Date).getTimezoneOffset()
//             });
//             return a
//         },
//         platformKey: function(a) {
//             this.options.excludePlatform ? a.addPreprocessedComponent({
//                 key: "navigator_platform",
//                 value: "unknown"
//             }) : a.addPreprocessedComponent({
//                 key: "navigator_platform",
//                 value: this.getNavigatorPlatform()
//             });
//             return a
//         },
//         canvasKey: function(a) { ! this.options.excludeCanvas && this.isCanvasSupported() ? a.addPreprocessedComponent({
//                 key: "canvas",
//                 value: this.getCanvasFp() || "unknown"
//             }) : a.addPreprocessedComponent({
//                 key: "canvas",
//                 value: "unknown"
//             });
//             return a
//         },
//         webglKey: function(a) { ! this.options.excludeWebGL && this.isWebGlSupported() ? a.addPreprocessedComponent({
//                 key: "webgl",
//                 value: this.getWebglFp() || "unknown"
//             }) : a.addPreprocessedComponent({
//                 key: "webgl",
//                 value: "unknown"
//             });
//             return a
//         },
//         webglVendorAndRendererKey: function(a) { ! this.options.excludeWebGLVendorAndRenderer && this.isWebGlSupported() ? a.addPreprocessedComponent({
//                 key: "webgl_vendor",
//                 value: this.getWebglVendorAndRenderer() || "unknown"
//             }) : a.addPreprocessedComponent({
//                 key: "webgl_vendor",
//                 value: "unknown"
//             });
//             return a
//         },
//         adBlockKey: function(a) {
//             this.options.excludeAdBlock ? a.addPreprocessedComponent({
//                 key: "adblock",
//                 value: "unknown"
//             }) : a.addPreprocessedComponent({
//                 key: "adblock",
//                 value: this.getAdBlock()
//             });
//             return a
//         },
//         hasLiedLanguagesKey: function(a) {
//             this.options.excludeHasLiedLanguages ? a.addPreprocessedComponent({
//                 key: "has_lied_languages",
//                 value: "unknown"
//             }) : a.addPreprocessedComponent({
//                 key: "has_lied_languages",
//                 value: this.getHasLiedLanguages()
//             });
//             return a
//         },
//         hasLiedResolutionKey: function(a) {
//             this.options.excludeHasLiedResolution ? a.addPreprocessedComponent({
//                 key: "has_lied_resolution",
//                 value: "unknown"
//             }) : a.addPreprocessedComponent({
//                 key: "has_lied_resolution",
//                 value: this.getHasLiedResolution()
//             });
//             return a
//         },
//         hasLiedOsKey: function(a) {
//             this.options.excludeHasLiedOs ? a.addPreprocessedComponent({
//                 key: "has_lied_os",
//                 value: "unknown"
//             }) : a.addPreprocessedComponent({
//                 key: "has_lied_os",
//                 value: this.getHasLiedOs()
//             });
//             return a
//         },
//         hasLiedBrowserKey: function(a) {
//             this.options.excludeHasLiedBrowser ? a.addPreprocessedComponent({
//                 key: "has_lied_browser",
//                 value: "unknown"
//             }) : a.addPreprocessedComponent({
//                 key: "has_lied_browser",
//                 value: this.getHasLiedBrowser()
//             });
//             return a
//         },
//         fontsKey: function(a, c) {
//             return this.options.excludeJsFonts ? this.flashFontsKey(a, c) || "unknown": this.jsFontsKey(a, c) || "unknown"
//         },
//         flashFontsKey: function(a, c) {
//             if (this.options.excludeFlashFonts || !this.hasSwfObjectLoaded() || !this.hasMinFlashInstalled() || "undefined" === typeof this.options.swfPath) return c(a);
//             this.loadSwfAndDetectFonts(function(b) {
//                 a.addPreprocessedComponent({
//                     key: "swf_fonts",
//                     value: b.join(";")
//                 });
//                 c(a)
//             })
//         },
//         jsFontsKey: function(a, c) {
//             var b = this;
//             return setTimeout(function() {
//                 var l = ["monospace", "sans-serif", "serif"],
//                 e = "Andale Mono;Arial;Arial Black;Arial Hebrew;Arial MT;Arial Narrow;Arial Rounded MT Bold;Arial Unicode MS;Bitstream Vera Sans Mono;Book Antiqua;Bookman Old Style;Calibri;Cambria;Cambria Math;Century;Century Gothic;Century Schoolbook;Comic Sans;Comic Sans MS;Consolas;Courier;Courier New;Garamond;Geneva;Georgia;Helvetica;Helvetica Neue;Impact;Lucida Bright;Lucida Calligraphy;Lucida Console;Lucida Fax;LUCIDA GRANDE;Lucida Handwriting;Lucida Sans;Lucida Sans Typewriter;Lucida Sans Unicode;Microsoft Sans Serif;Monaco;Monotype Corsiva;MS Gothic;MS Outlook;MS PGothic;MS Reference Sans Serif;MS Sans Serif;MS Serif;MYRIAD;MYRIAD PRO;Palatino;Palatino Linotype;Segoe Print;Segoe Script;Segoe UI;Segoe UI Light;Segoe UI Semibold;Segoe UI Symbol;Tahoma;Times;Times New Roman;Times New Roman PS;Trebuchet MS;Verdana;Wingdings;Wingdings 2;Wingdings 3".split(";"),
//                 g = "Abadi MT Condensed Light;Academy Engraved LET;ADOBE CASLON PRO;Adobe Garamond;ADOBE GARAMOND PRO;Agency FB;Aharoni;Albertus Extra Bold;Albertus Medium;Algerian;Amazone BT;American Typewriter;American Typewriter Condensed;AmerType Md BT;Andalus;Angsana New;AngsanaUPC;Antique Olive;Aparajita;Apple Chancery;Apple Color Emoji;Apple SD Gothic Neo;Arabic Typesetting;ARCHER;ARNO PRO;Arrus BT;Aurora Cn BT;AvantGarde Bk BT;AvantGarde Md BT;AVENIR;Ayuthaya;Bandy;Bangla Sangam MN;Bank Gothic;BankGothic Md BT;Baskerville;Baskerville Old Face;Batang;BatangChe;Bauer Bodoni;Bauhaus 93;Bazooka;Bell MT;Bembo;Benguiat Bk BT;Berlin Sans FB;Berlin Sans FB Demi;Bernard MT Condensed;BernhardFashion BT;BernhardMod BT;Big Caslon;BinnerD;Blackadder ITC;BlairMdITC TT;Bodoni 72;Bodoni 72 Oldstyle;Bodoni 72 Smallcaps;Bodoni MT;Bodoni MT Black;Bodoni MT Condensed;Bodoni MT Poster Compressed;Bookshelf Symbol 7;Boulder;Bradley Hand;Bradley Hand ITC;Bremen Bd BT;Britannic Bold;Broadway;Browallia New;BrowalliaUPC;Brush Script MT;Californian FB;Calisto MT;Calligrapher;Candara;CaslonOpnface BT;Castellar;Centaur;Cezanne;CG Omega;CG Times;Chalkboard;Chalkboard SE;Chalkduster;Charlesworth;Charter Bd BT;Charter BT;Chaucer;ChelthmITC Bk BT;Chiller;Clarendon;Clarendon Condensed;CloisterBlack BT;Cochin;Colonna MT;Constantia;Cooper Black;Copperplate;Copperplate Gothic;Copperplate Gothic Bold;Copperplate Gothic Light;CopperplGoth Bd BT;Corbel;Cordia New;CordiaUPC;Cornerstone;Coronet;Cuckoo;Curlz MT;DaunPenh;Dauphin;David;DB LCD Temp;DELICIOUS;Denmark;DFKai-SB;Didot;DilleniaUPC;DIN;DokChampa;Dotum;DotumChe;Ebrima;Edwardian Script ITC;Elephant;English 111 Vivace BT;Engravers MT;EngraversGothic BT;Eras Bold ITC;Eras Demi ITC;Eras Light ITC;Eras Medium ITC;EucrosiaUPC;Euphemia;Euphemia UCAS;EUROSTILE;Exotc350 Bd BT;FangSong;Felix Titling;Fixedsys;FONTIN;Footlight MT Light;Forte;FrankRuehl;Fransiscan;Freefrm721 Blk BT;FreesiaUPC;Freestyle Script;French Script MT;FrnkGothITC Bk BT;Fruitger;FRUTIGER;Futura;Futura Bk BT;Futura Lt BT;Futura Md BT;Futura ZBlk BT;FuturaBlack BT;Gabriola;Galliard BT;Gautami;Geeza Pro;Geometr231 BT;Geometr231 Hv BT;Geometr231 Lt BT;GeoSlab 703 Lt BT;GeoSlab 703 XBd BT;Gigi;Gill Sans;Gill Sans MT;Gill Sans MT Condensed;Gill Sans MT Ext Condensed Bold;Gill Sans Ultra Bold;Gill Sans Ultra Bold Condensed;Gisha;Gloucester MT Extra Condensed;GOTHAM;GOTHAM BOLD;Goudy Old Style;Goudy Stout;GoudyHandtooled BT;GoudyOLSt BT;Gujarati Sangam MN;Gulim;GulimChe;Gungsuh;GungsuhChe;Gurmukhi MN;Haettenschweiler;Harlow Solid Italic;Harrington;Heather;Heiti SC;Heiti TC;HELV;Herald;High Tower Text;Hiragino Kaku Gothic ProN;Hiragino Mincho ProN;Hoefler Text;Humanst 521 Cn BT;Humanst521 BT;Humanst521 Lt BT;Imprint MT Shadow;Incised901 Bd BT;Incised901 BT;Incised901 Lt BT;INCONSOLATA;Informal Roman;Informal011 BT;INTERSTATE;IrisUPC;Iskoola Pota;JasmineUPC;Jazz LET;Jenson;Jester;Jokerman;Juice ITC;Kabel Bk BT;Kabel Ult BT;Kailasa;KaiTi;Kalinga;Kannada Sangam MN;Kartika;Kaufmann Bd BT;Kaufmann BT;Khmer UI;KodchiangUPC;Kokila;Korinna BT;Kristen ITC;Krungthep;Kunstler Script;Lao UI;Latha;Leelawadee;Letter Gothic;Levenim MT;LilyUPC;Lithograph;Lithograph Light;Long Island;Lydian BT;Magneto;Maiandra GD;Malayalam Sangam MN;Malgun Gothic;Mangal;Marigold;Marion;Marker Felt;Market;Marlett;Matisse ITC;Matura MT Script Capitals;Meiryo;Meiryo UI;Microsoft Himalaya;Microsoft JhengHei;Microsoft New Tai Lue;Microsoft PhagsPa;Microsoft Tai Le;Microsoft Uighur;Microsoft YaHei;Microsoft Yi Baiti;MingLiU;MingLiU_HKSCS;MingLiU_HKSCS-ExtB;MingLiU-ExtB;Minion;Minion Pro;Miriam;Miriam Fixed;Mistral;Modern;Modern No. 20;Mona Lisa Solid ITC TT;Mongolian Baiti;MONO;MoolBoran;Mrs Eaves;MS LineDraw;MS Mincho;MS PMincho;MS Reference Specialty;MS UI Gothic;MT Extra;MUSEO;MV Boli;Nadeem;Narkisim;NEVIS;News Gothic;News GothicMT;NewsGoth BT;Niagara Engraved;Niagara Solid;Noteworthy;NSimSun;Nyala;OCR A Extended;Old Century;Old English Text MT;Onyx;Onyx BT;OPTIMA;Oriya Sangam MN;OSAKA;OzHandicraft BT;Palace Script MT;Papyrus;Parchment;Party LET;Pegasus;Perpetua;Perpetua Titling MT;PetitaBold;Pickwick;Plantagenet Cherokee;Playbill;PMingLiU;PMingLiU-ExtB;Poor Richard;Poster;PosterBodoni BT;PRINCETOWN LET;Pristina;PTBarnum BT;Pythagoras;Raavi;Rage Italic;Ravie;Ribbon131 Bd BT;Rockwell;Rockwell Condensed;Rockwell Extra Bold;Rod;Roman;Sakkal Majalla;Santa Fe LET;Savoye LET;Sceptre;Script;Script MT Bold;SCRIPTINA;Serifa;Serifa BT;Serifa Th BT;ShelleyVolante BT;Sherwood;Shonar Bangla;Showcard Gothic;Shruti;Signboard;SILKSCREEN;SimHei;Simplified Arabic;Simplified Arabic Fixed;SimSun;SimSun-ExtB;Sinhala Sangam MN;Sketch Rockwell;Skia;Small Fonts;Snap ITC;Snell Roundhand;Socket;Souvenir Lt BT;Staccato222 BT;Steamer;Stencil;Storybook;Styllo;Subway;Swis721 BlkEx BT;Swiss911 XCm BT;Sylfaen;Synchro LET;System;Tamil Sangam MN;Technical;Teletype;Telugu Sangam MN;Tempus Sans ITC;Terminal;Thonburi;Traditional Arabic;Trajan;TRAJAN PRO;Tristan;Tubular;Tunga;Tw Cen MT;Tw Cen MT Condensed;Tw Cen MT Condensed Extra Bold;TypoUpright BT;Unicorn;Univers;Univers CE 55 Medium;Univers Condensed;Utsaah;Vagabond;Vani;Vijaya;Viner Hand ITC;VisualUI;Vivaldi;Vladimir Script;Vrinda;Westminster;WHITNEY;Wide Latin;ZapfEllipt BT;ZapfHumnst BT;ZapfHumnst Dm BT;Zapfino;Zurich BlkEx BT;Zurich Ex BT;ZWAdobeF".split(";");
//                 b.options.extendedJsFonts && (e = e.concat(g));
//                 var e = e.concat(b.options.userDefinedFonts),
//                 g = document.getElementsByTagName("body")[0],
//                 h = document.createElement("div"),
//                 u = document.createElement("div"),
//                 f = {},
//                 p = {},
//                 x = function() {
//                     var a = document.createElement("span");
//                     a.style.position = "absolute";
//                     a.style.left = "-9999px";
//                     a.style.fontSize = "72px";
//                     a.style.lineHeight = "normal";
//                     a.innerHTML = "mmmmmmmmmmlli";
//                     return a
//                 },
//                 d = function(a) {
//                     for (var b = !1,
//                     c = 0; c < l.length && !(b = a[c].offsetWidth !== f[l[c]] || a[c].offsetHeight !== p[l[c]]); c++);
//                     return b
//                 },
//                 q = function() {
//                     for (var a = [], b = 0, c = l.length; b < c; b++) {
//                         var r = x();
//                         r.style.fontFamily = l[b];
//                         h.appendChild(r);
//                         a.push(r)
//                     }
//                     return a
//                 } ();
//                 g.appendChild(h);
//                 for (var w = 0,
//                 r = l.length; w < r; w++) f[l[w]] = q[w].offsetWidth,
//                 p[l[w]] = q[w].offsetHeight;
//                 q = function() {
//                     for (var a = {},
//                     b = 0,
//                     c = e.length; b < c; b++) {
//                         for (var r = [], q = 0, v = l.length; q < v; q++) {
//                             var d;
//                             d = e[b];
//                             var f = l[q],
//                             w = x();
//                             w.style.fontFamily = "'" + d + "'," + f;
//                             d = w;
//                             u.appendChild(d);
//                             r.push(d)
//                         }
//                         a[e[b]] = r
//                     }
//                     return a
//                 } ();
//                 g.appendChild(u);
//                 for (var w = [], r = 0, v = e.length; r < v; r++) d(q[e[r]]) && w.push(e[r]);
//                 g.removeChild(u);
//                 g.removeChild(h);
//                 a.addPreprocessedComponent({
//                     key: "js_fonts",
//                     value: w
//                 });
//                 c(a)
//             },
//             1)
//         },
//         pluginsKey: function(a) {
//             this.options.excludePlugins ? a.addPreprocessedComponent({
//                 key: "plugins",
//                 value: "unknown"
//             }) : this.isIE() ? this.options.excludeIEPlugins || a.addPreprocessedComponent({
//                 key: "ie_plugins",
//                 value: this.getIEPlugins() || "unknown"
//             }) : a.addPreprocessedComponent({
//                 key: "regular_plugins",
//                 value: this.getRegularPlugins() || "unknown"
//             });
//             return a
//         },
//         getRegularPlugins: function() {
//             var a = [];
//             if (navigator.plugins) for (var c = 0,
//             b = navigator.plugins.length; c < b; c++) a.push(navigator.plugins[c]);
//             this.pluginsShouldBeSorted() && (a = a.sort(function(a, b) {
//                 return a.name > b.name ? 1 : a.name < b.name ? -1 : 0
//             }));
//             return this.map(a,
//             function(a) {
//                 var b = this.map(a,
//                 function(a) {
//                     return [a.type, a.suffixes].join("~")
//                 }).join(",");
//                 return [a.name, a.description, b].join("::")
//             },
//             this)
//         },
//         getIEPlugins: function() {
//             var a = [];
//             if (Object.getOwnPropertyDescriptor && Object.getOwnPropertyDescriptor(window, "ActiveXObject") || "ActiveXObject" in window) a = this.map("AcroPDF.PDF;Adodb.Stream;AgControCryptoJSgControl;DevalVRXCtrl.DevalVRXCtrl.1;MacromediaFlashPaper.MacromediaFlashPaper;Msxml2.DOMDocument;Msxml2.XMLHTTP;PDF.PdfCtrl;QuickTime.QuickTime;QuickTimeCheckObject.QuickTimeCheck.1;RealPlayer;RealPlayer.RealPlayer(tm) ActiveX Control (32-bit);RealVideo.RealVideo(tm) ActiveX Control (32-bit);Scripting.Dictionary;SWCtl.SWCtl;Shell.UIHelper;ShockwaveFlash.ShockwaveFlash;Skype.Detection;TDCCtl.TDCCtl;WMPlayer.OCX;rmocx.RealPlayer G2 Control;rmocx.RealPlayer G2 Control.1".split(";"),
//             function(a) {
//                 try {
//                     return new window.ActiveXObject(a),
//                     a
//                 } catch(b) {
//                     return null
//                 }
//             });
//             navigator.plugins && (a = a.concat(this.getRegularPlugins()));
//             return a
//         },
//         pluginsShouldBeSorted: function() {
//             for (var a = !1,
//             c = 0,
//             b = this.options.sortPluginsFor.length; c < b; c++) if (navigator.userAgent.match(this.options.sortPluginsFor[c])) {
//                 a = !0;
//                 break
//             }
//             return a
//         },
//         touchSupportKey: function(a) {
//             this.options.excludeTouchSupport ? a.addPreprocessedComponent({
//                 key: "touch_support",
//                 value: "unknown"
//             }) : a.addPreprocessedComponent({
//                 key: "touch_support",
//                 value: this.getTouchSupport() || "unknown"
//             });
//             return a
//         },
//         hardwareConcurrencyKey: function(a) {
//             this.options.excludeHardwareConcurrency ? a.addPreprocessedComponent({
//                 key: "hardware_concurrency",
//                 value: "unknown"
//             }) : a.addPreprocessedComponent({
//                 key: "hardware_concurrency",
//                 value: this.getHardwareConcurrency() || "unknown"
//             });
//             return a
//         },
//         getHardwareConcurrency: function() {
//             return navigator.hardwareConcurrency ? navigator.hardwareConcurrency: "unknown"
//         },
//         getNavigatorPlatform: function() {
//             return navigator.platform ? navigator.platform: "unknown"
//         },
//         getTouchSupport: function() {
//             var a = 0,
//             c = !1;
//             "undefined" !== typeof navigator.maxTouchPoints ? a = navigator.maxTouchPoints: "undefined" !== typeof navigator.msMaxTouchPoints && (a = navigator.msMaxTouchPoints);
//             try {
//                 document.createEvent("TouchEvent"),
//                 c = !0
//             } catch(b) {}
//             return [a, c, "ontouchstart" in window]
//         },
//         getCanvasFp: function() {
//             var a = [],
//             c = document.createElement("canvas");
//             c.width = 2E3;
//             c.height = 200;
//             c.style.display = "inline";
//             var b = c.getContext("2d");
//             b.rect(0, 0, 10, 10);
//             b.rect(2, 2, 6, 6);
//             a.push("canvas winding:" + (!1 === b.isPointInPath(5, 5, "evenodd") ? "yes": "no"));
//             b.textBaseline = "alphabetic";
//             b.fillStyle = "#f60";
//             b.fillRect(125, 1, 62, 20);
//             b.fillStyle = "#069";
//             b.font = this.options.dontUseFakeFontInCanvas ? "11pt Arial": "11pt no-real-font-123";
//             b.fillText("Cwm fjordbank glyphs vext quiz, \ud83d\ude03", 2, 15);
//             b.fillStyle = "rgba(102, 204, 0, 0.2)";
//             b.font = "18pt Arial";
//             b.fillText("Cwm fjordbank glyphs vext quiz, \ud83d\ude03", 4, 45);
//             b.globalCompositeOperation = "multiply";
//             b.fillStyle = "rgb(255,0,255)";
//             b.beginPath();
//             b.arc(50, 50, 50, 0, 2 * Math.PI, !0);
//             b.closePath();
//             b.fill();
//             b.fillStyle = "rgb(0,255,255)";
//             b.beginPath();
//             b.arc(100, 50, 50, 0, 2 * Math.PI, !0);
//             b.closePath();
//             b.fill();
//             b.fillStyle = "rgb(255,255,0)";
//             b.beginPath();
//             b.arc(75, 100, 50, 0, 2 * Math.PI, !0);
//             b.closePath();
//             b.fill();
//             b.fillStyle = "rgb(255,0,255)";
//             b.arc(75, 75, 75, 0, 2 * Math.PI, !0);
//             b.arc(75, 75, 25, 0, 2 * Math.PI, !0);
//             b.fill("evenodd");
//             a.push("canvas fp:" + c.toDataURL());
//             return a.join("~")
//         },
//         getWebglFp: function() {
//             var a, c = function(b) {
//                 a.clearColor(0, 0, 0, 1);
//                 a.enable(a.DEPTH_TEST);
//                 a.depthFunc(a.LEQUAL);
//                 a.clear(a.COLOR_BUFFER_BIT | a.DEPTH_BUFFER_BIT);
//                 return "[" + b[0] + ", " + b[1] + "]"
//             };
//             a = this.getWebglCanvas();
//             if (!a) return null;
//             var b = [],
//             l = a.createBuffer();
//             a.bindBuffer(a.ARRAY_BUFFER, l);
//             var e = new Float32Array([ - .2, -.9, 0, .4, -.26, 0, 0, .732134444, 0]);
//             a.bufferData(a.ARRAY_BUFFER, e, a.STATIC_DRAW);
//             l.itemSize = 3;
//             l.numItems = 3;
//             var e = a.createProgram(),
//             g = a.createShader(a.VERTEX_SHADER);
//             a.shaderSource(g, "attribute vec2 attrVertex;varying vec2 varyinTexCoordinate;uniform vec2 uniformOffset;void main(){varyinTexCoordinate=attrVertex+uniformOffset;gl_Position=vec4(attrVertex,0,1);}");
//             a.compileShader(g);
//             var h = a.createShader(a.FRAGMENT_SHADER);
//             a.shaderSource(h, "precision mediump float;varying vec2 varyinTexCoordinate;void main() {gl_FragColor=vec4(varyinTexCoordinate,0,1);}");
//             a.compileShader(h);
//             a.attachShader(e, g);
//             a.attachShader(e, h);
//             a.linkProgram(e);
//             a.useProgram(e);
//             e.vertexPosAttrib = a.getAttribLocation(e, "attrVertex");
//             e.offsetUniform = a.getUniformLocation(e, "uniformOffset");
//             a.enableVertexAttribArray(e.vertexPosArray);
//             a.vertexAttribPointer(e.vertexPosAttrib, l.itemSize, a.FLOAT, !1, 0, 0);
//             a.uniform2f(e.offsetUniform, 1, 1);
//             a.drawArrays(a.TRIANGLE_STRIP, 0, l.numItems);
//             null != a.canvas && b.push(a.canvas.toDataURL());
//             b.push("extensions:" + a.getSupportedExtensions().join(";"));
//             b.push("webgl aliased line width range:" + c(a.getParameter(a.ALIASED_LINE_WIDTH_RANGE)));
//             b.push("webgl aliased point size range:" + c(a.getParameter(a.ALIASED_POINT_SIZE_RANGE)));
//             b.push("webgl alpha bits:" + a.getParameter(a.ALPHA_BITS));
//             b.push("webgl antialiasing:" + (a.getContextAttributes().antialias ? "yes": "no"));
//             b.push("webgl blue bits:" + a.getParameter(a.BLUE_BITS));
//             b.push("webgl depth bits:" + a.getParameter(a.DEPTH_BITS));
//             b.push("webgl green bits:" + a.getParameter(a.GREEN_BITS));
//             b.push("webgl max anisotropy:" +
//             function(a) {
//                 var b = a.getExtension("EXT_texture_filter_anisotropic") || a.getExtension("WEBKIT_EXT_texture_filter_anisotropic") || a.getExtension("MOZ_EXT_texture_filter_anisotropic");
//                 return b ? (a = a.getParameter(b.MAX_TEXTURE_MAX_ANISOTROPY_EXT), 0 === a && (a = 2), a) : null
//             } (a));
//             b.push("webgl max combined texture image units:" + a.getParameter(a.MAX_COMBINED_TEXTURE_IMAGE_UNITS));
//             b.push("webgl max cube map texture size:" + a.getParameter(a.MAX_CUBE_MAP_TEXTURE_SIZE));
//             b.push("webgl max fragment uniform vectors:" + a.getParameter(a.MAX_FRAGMENT_UNIFORM_VECTORS));
//             b.push("webgl max render buffer size:" + a.getParameter(a.MAX_RENDERBUFFER_SIZE));
//             b.push("webgl max texture image units:" + a.getParameter(a.MAX_TEXTURE_IMAGE_UNITS));
//             b.push("webgl max texture size:" + a.getParameter(a.MAX_TEXTURE_SIZE));
//             b.push("webgl max varying vectors:" + a.getParameter(a.MAX_VARYING_VECTORS));
//             b.push("webgl max vertex attribs:" + a.getParameter(a.MAX_VERTEX_ATTRIBS));
//             b.push("webgl max vertex texture image units:" + a.getParameter(a.MAX_VERTEX_TEXTURE_IMAGE_UNITS));
//             b.push("webgl max vertex uniform vectors:" + a.getParameter(a.MAX_VERTEX_UNIFORM_VECTORS));
//             b.push("webgl max viewport dims:" + c(a.getParameter(a.MAX_VIEWPORT_DIMS)));
//             b.push("webgl red bits:" + a.getParameter(a.RED_BITS));
//             b.push("webgl renderer:" + a.getParameter(a.RENDERER));
//             b.push("webgl shading language version:" + a.getParameter(a.SHADING_LANGUAGE_VERSION));
//             b.push("webgl stencil bits:" + a.getParameter(a.STENCIL_BITS));
//             b.push("webgl vendor:" + a.getParameter(a.VENDOR));
//             b.push("webgl version:" + a.getParameter(a.VERSION));
//             try {
//                 var u = a.getExtension("WEBGL_debug_renderer_info");
//                 u && (b.push("webgl unmasked vendor:" + a.getParameter(u.UNMASKED_VENDOR_WEBGL)), b.push("webgl unmasked renderer:" + a.getParameter(u.UNMASKED_RENDERER_WEBGL)))
//             } catch(f) {}
//             if (!a.getShaderPrecisionFormat) return b.join("~");
//             b.push("webgl vertex shader high float precision:" + a.getShaderPrecisionFormat(a.VERTEX_SHADER, a.HIGH_FLOAT).precision);
//             b.push("webgl vertex shader high float precision rangeMin:" + a.getShaderPrecisionFormat(a.VERTEX_SHADER, a.HIGH_FLOAT).rangeMin);
//             b.push("webgl vertex shader high float precision rangeMax:" + a.getShaderPrecisionFormat(a.VERTEX_SHADER, a.HIGH_FLOAT).rangeMax);
//             b.push("webgl vertex shader medium float precision:" + a.getShaderPrecisionFormat(a.VERTEX_SHADER, a.MEDIUM_FLOAT).precision);
//             b.push("webgl vertex shader medium float precision rangeMin:" + a.getShaderPrecisionFormat(a.VERTEX_SHADER, a.MEDIUM_FLOAT).rangeMin);
//             b.push("webgl vertex shader medium float precision rangeMax:" + a.getShaderPrecisionFormat(a.VERTEX_SHADER, a.MEDIUM_FLOAT).rangeMax);
//             b.push("webgl vertex shader low float precision:" + a.getShaderPrecisionFormat(a.VERTEX_SHADER, a.LOW_FLOAT).precision);
//             b.push("webgl vertex shader low float precision rangeMin:" + a.getShaderPrecisionFormat(a.VERTEX_SHADER, a.LOW_FLOAT).rangeMin);
//             b.push("webgl vertex shader low float precision rangeMax:" + a.getShaderPrecisionFormat(a.VERTEX_SHADER, a.LOW_FLOAT).rangeMax);
//             b.push("webgl fragment shader high float precision:" + a.getShaderPrecisionFormat(a.FRAGMENT_SHADER, a.HIGH_FLOAT).precision);
//             b.push("webgl fragment shader high float precision rangeMin:" + a.getShaderPrecisionFormat(a.FRAGMENT_SHADER, a.HIGH_FLOAT).rangeMin);
//             b.push("webgl fragment shader high float precision rangeMax:" + a.getShaderPrecisionFormat(a.FRAGMENT_SHADER, a.HIGH_FLOAT).rangeMax);
//             b.push("webgl fragment shader medium float precision:" + a.getShaderPrecisionFormat(a.FRAGMENT_SHADER, a.MEDIUM_FLOAT).precision);
//             b.push("webgl fragment shader medium float precision rangeMin:" + a.getShaderPrecisionFormat(a.FRAGMENT_SHADER, a.MEDIUM_FLOAT).rangeMin);
//             b.push("webgl fragment shader medium float precision rangeMax:" + a.getShaderPrecisionFormat(a.FRAGMENT_SHADER, a.MEDIUM_FLOAT).rangeMax);
//             b.push("webgl fragment shader low float precision:" + a.getShaderPrecisionFormat(a.FRAGMENT_SHADER, a.LOW_FLOAT).precision);
//             b.push("webgl fragment shader low float precision rangeMin:" + a.getShaderPrecisionFormat(a.FRAGMENT_SHADER, a.LOW_FLOAT).rangeMin);
//             b.push("webgl fragment shader low float precision rangeMax:" + a.getShaderPrecisionFormat(a.FRAGMENT_SHADER, a.LOW_FLOAT).rangeMax);
//             b.push("webgl vertex shader high int precision:" + a.getShaderPrecisionFormat(a.VERTEX_SHADER, a.HIGH_INT).precision);
//             b.push("webgl vertex shader high int precision rangeMin:" + a.getShaderPrecisionFormat(a.VERTEX_SHADER, a.HIGH_INT).rangeMin);
//             b.push("webgl vertex shader high int precision rangeMax:" + a.getShaderPrecisionFormat(a.VERTEX_SHADER, a.HIGH_INT).rangeMax);
//             b.push("webgl vertex shader medium int precision:" + a.getShaderPrecisionFormat(a.VERTEX_SHADER, a.MEDIUM_INT).precision);
//             b.push("webgl vertex shader medium int precision rangeMin:" + a.getShaderPrecisionFormat(a.VERTEX_SHADER, a.MEDIUM_INT).rangeMin);
//             b.push("webgl vertex shader medium int precision rangeMax:" + a.getShaderPrecisionFormat(a.VERTEX_SHADER, a.MEDIUM_INT).rangeMax);
//             b.push("webgl vertex shader low int precision:" + a.getShaderPrecisionFormat(a.VERTEX_SHADER, a.LOW_INT).precision);
//             b.push("webgl vertex shader low int precision rangeMin:" + a.getShaderPrecisionFormat(a.VERTEX_SHADER, a.LOW_INT).rangeMin);
//             b.push("webgl vertex shader low int precision rangeMax:" + a.getShaderPrecisionFormat(a.VERTEX_SHADER, a.LOW_INT).rangeMax);
//             b.push("webgl fragment shader high int precision:" + a.getShaderPrecisionFormat(a.FRAGMENT_SHADER, a.HIGH_INT).precision);
//             b.push("webgl fragment shader high int precision rangeMin:" + a.getShaderPrecisionFormat(a.FRAGMENT_SHADER, a.HIGH_INT).rangeMin);
//             b.push("webgl fragment shader high int precision rangeMax:" + a.getShaderPrecisionFormat(a.FRAGMENT_SHADER, a.HIGH_INT).rangeMax);
//             b.push("webgl fragment shader medium int precision:" + a.getShaderPrecisionFormat(a.FRAGMENT_SHADER, a.MEDIUM_INT).precision);
//             b.push("webgl fragment shader medium int precision rangeMin:" + a.getShaderPrecisionFormat(a.FRAGMENT_SHADER, a.MEDIUM_INT).rangeMin);
//             b.push("webgl fragment shader medium int precision rangeMax:" + a.getShaderPrecisionFormat(a.FRAGMENT_SHADER, a.MEDIUM_INT).rangeMax);
//             b.push("webgl fragment shader low int precision:" + a.getShaderPrecisionFormat(a.FRAGMENT_SHADER, a.LOW_INT).precision);
//             b.push("webgl fragment shader low int precision rangeMin:" + a.getShaderPrecisionFormat(a.FRAGMENT_SHADER, a.LOW_INT).rangeMin);
//             b.push("webgl fragment shader low int precision rangeMax:" + a.getShaderPrecisionFormat(a.FRAGMENT_SHADER, a.LOW_INT).rangeMax);
//             return b.join("~")
//         },
//         getWebglVendorAndRenderer: function() {
//             try {
//                 var a = this.getWebglCanvas(),
//                 c = a.getExtension("WEBGL_debug_renderer_info");
//                 return a.getParameter(c.UNMASKED_VENDOR_WEBGL) + "~" + a.getParameter(c.UNMASKED_RENDERER_WEBGL)
//             } catch(b) {
//                 return null
//             }
//         },
//         getAdBlock: function() {
//             var a = document.createElement("div");
//             a.innerHTML = "&nbsp;";
//             a.className = "adsbox";
//             var c = !1;
//             try {
//                 document.body.appendChild(a),
//                 c = 0 === document.getElementsByClassName("adsbox")[0].offsetHeight,
//                 document.body.removeChild(a)
//             } catch(b) {
//                 c = !1
//             }
//             return c
//         },
//         getHasLiedLanguages: function() {
//             if ("undefined" !== typeof navigator.languages) try {
//                 if (navigator.languages[0].substr(0, 2) !== navigator.language.substr(0, 2)) return ! 0
//             } catch(a) {
//                 return ! 0
//             }
//             return ! 1
//         },
//         getHasLiedResolution: function() {
//             return window.screen.width < window.screen.availWidth || window.screen.height < window.screen.availHeight ? !0 : !1
//         },
//         getHasLiedOs: function() {
//             var a = navigator.userAgent.toLowerCase(),
//             c = navigator.oscpu,
//             b = navigator.platform.toLowerCase(),
//             a = 0 <= a.indexOf("windows phone") ? "Windows Phone": 0 <= a.indexOf("win") ? "Windows": 0 <= a.indexOf("android") ? "Android": 0 <= a.indexOf("linux") ? "Linux": 0 <= a.indexOf("iphone") || 0 <= a.indexOf("ipad") ? "iOS": 0 <= a.indexOf("mac") ? "Mac": "Other";
//             return ("ontouchstart" in window || 0 < navigator.maxTouchPoints || 0 < navigator.msMaxTouchPoints) && "Windows Phone" !== a && "Android" !== a && "iOS" !== a && "Other" !== a || "undefined" !== typeof c && (c = c.toLowerCase(), 0 <= c.indexOf("win") && "Windows" !== a && "Windows Phone" !== a || 0 <= c.indexOf("linux") && "Linux" !== a && "Android" !== a || 0 <= c.indexOf("mac") && "Mac" !== a && "iOS" !== a || ( - 1 === c.indexOf("win") && -1 === c.indexOf("linux") && -1 === c.indexOf("mac")) !== ("Other" === a)) ? !0 : 0 <= b.indexOf("win") && "Windows" !== a && "Windows Phone" !== a || (0 <= b.indexOf("linux") || 0 <= b.indexOf("android") || 0 <= b.indexOf("pike")) && "Linux" !== a && "Android" !== a || (0 <= b.indexOf("mac") || 0 <= b.indexOf("ipad") || 0 <= b.indexOf("ipod") || 0 <= b.indexOf("iphone")) && "Mac" !== a && "iOS" !== a || ( - 1 === b.indexOf("win") && -1 === b.indexOf("linux") && -1 === b.indexOf("mac")) !== ("Other" === a) ? !0 : "undefined" === typeof navigator.plugins && "Windows" !== a && "Windows Phone" !== a ? !0 : !1
//         },
//         getHasLiedBrowser: function() {
//             var a = navigator.userAgent.toLowerCase(),
//             c = navigator.productSub,
//             a = 0 <= a.indexOf("firefox") ? "Firefox": 0 <= a.indexOf("opera") || 0 <= a.indexOf("opr") ? "Opera": 0 <= a.indexOf("chrome") ? "Chrome": 0 <= a.indexOf("safari") ? "Safari": 0 <= a.indexOf("trident") ? "Internet Explorer": "Other";
//             if (("Chrome" === a || "Safari" === a || "Opera" === a) && "20030107" !== c) return ! 0;
//             c = eval.toString().length;
//             if (37 === c && "Safari" !== a && "Firefox" !== a && "Other" !== a || 39 === c && "Internet Explorer" !== a && "Other" !== a || 33 === c && "Chrome" !== a && "Opera" !== a && "Other" !== a) return ! 0;
//             var b;
//             try {
//                 throw "a";
//             } catch(l) {
//                 try {
//                     l.toSource(),
//                     b = !0
//                 } catch(e) {
//                     b = !1
//                 }
//             }
//             return b && "Firefox" !== a && "Other" !== a ? !0 : !1
//         },
//         isCanvasSupported: function() {
//             var a = document.createElement("canvas");
//             return ! (!a.getContext || !a.getContext("2d"))
//         },
//         isWebGlSupported: function() {
//             if (!this.isCanvasSupported()) return ! 1;
//             var a = this.getWebglCanvas();
//             return !! window.WebGLRenderingContext && !!a
//         },
//         isIE: function() {
//             return "Microsoft Internet Explorer" === navigator.appName || "Netscape" === navigator.appName && /Trident/.test(navigator.userAgent) ? !0 : !1
//         },
//         hasSwfObjectLoaded: function() {
//             return "undefined" !== typeof window.swfobject
//         },
//         hasMinFlashInstalled: function() {
//             return window.swfobject.hasFlashPlayerVersion("9.0.0")
//         },
//         addFlashDivNode: function() {
//             var a = document.createElement("div");
//             a.setAttribute("id", this.options.swfContainerId);
//             document.body.appendChild(a)
//         },
//         loadSwfAndDetectFonts: function(a) {
//             window.___fp_swf_loaded = function(b) {
//                 a(b)
//             };
//             var c = this.options.swfContainerId;
//             this.addFlashDivNode();
//             window.swfobject.embedSWF(this.options.swfPath, c, "1", "1", "9.0.0", !1, {
//                 onReady: "___fp_swf_loaded"
//             },
//             {
//                 allowScriptAccess: "always",
//                 menu: "false"
//             },
//             {})
//         },
//         getWebglCanvas: function() {
//             var a = document.createElement("canvas"),
//             c = null;
//             try {
//                 c = a.getContext("webgl") || a.getContext("experimental-webgl")
//             } catch(b) {}
//             c || (c = null);
//             return c
//         },
//         each: function(a, c, b) {
//             if (null !== a) if (this.nativeForEach && a.forEach === this.nativeForEach) a.forEach(c, b);
//             else if (a.length === +a.length) for (var l = 0,
//             e = a.length; l < e && c.call(b, a[l], l, a) !== {}; l++);
//             else for (l in a) if (a.hasOwnProperty(l) && c.call(b, a[l], l, a) === {}) break
//         },
//         map: function(a, c, b) {
//             var l = [];
//             if (null == a) return l;
//             if (this.nativeMap && a.map === this.nativeMap) return a.map(c, b);
//             this.each(a,
//             function(a, g, h) {
//                 l[l.length] = c.call(b, a, g, h)
//             });
//             return l
//         },
//         x64Add: function(a, c) {
//             a = [a[0] >>> 16, a[0] & 65535, a[1] >>> 16, a[1] & 65535];
//             c = [c[0] >>> 16, c[0] & 65535, c[1] >>> 16, c[1] & 65535];
//             var b = [0, 0, 0, 0];
//             b[3] += a[3] + c[3];
//             b[2] += b[3] >>> 16;
//             b[3] &= 65535;
//             b[2] += a[2] + c[2];
//             b[1] += b[2] >>> 16;
//             b[2] &= 65535;
//             b[1] += a[1] + c[1];
//             b[0] += b[1] >>> 16;
//             b[1] &= 65535;
//             b[0] += a[0] + c[0];
//             b[0] &= 65535;
//             return [b[0] << 16 | b[1], b[2] << 16 | b[3]]
//         },
//         x64Multiply: function(a, c) {
//             a = [a[0] >>> 16, a[0] & 65535, a[1] >>> 16, a[1] & 65535];
//             c = [c[0] >>> 16, c[0] & 65535, c[1] >>> 16, c[1] & 65535];
//             var b = [0, 0, 0, 0];
//             b[3] += a[3] * c[3];
//             b[2] += b[3] >>> 16;
//             b[3] &= 65535;
//             b[2] += a[2] * c[3];
//             b[1] += b[2] >>> 16;
//             b[2] &= 65535;
//             b[2] += a[3] * c[2];
//             b[1] += b[2] >>> 16;
//             b[2] &= 65535;
//             b[1] += a[1] * c[3];
//             b[0] += b[1] >>> 16;
//             b[1] &= 65535;
//             b[1] += a[2] * c[2];
//             b[0] += b[1] >>> 16;
//             b[1] &= 65535;
//             b[1] += a[3] * c[1];
//             b[0] += b[1] >>> 16;
//             b[1] &= 65535;
//             b[0] += a[0] * c[3] + a[1] * c[2] + a[2] * c[1] + a[3] * c[0];
//             b[0] &= 65535;
//             return [b[0] << 16 | b[1], b[2] << 16 | b[3]]
//         },
//         x64Rotl: function(a, c) {
//             c %= 64;
//             if (32 === c) return [a[1], a[0]];
//             if (32 > c) return [a[0] << c | a[1] >>> 32 - c, a[1] << c | a[0] >>> 32 - c];
//             c -= 32;
//             return [a[1] << c | a[0] >>> 32 - c, a[0] << c | a[1] >>> 32 - c]
//         },
//         x64LeftShift: function(a, c) {
//             c %= 64;
//             return 0 === c ? a: 32 > c ? [a[0] << c | a[1] >>> 32 - c, a[1] << c] : [a[1] << c - 32, 0]
//         },
//         x64Xor: function(a, c) {
//             return [a[0] ^ c[0], a[1] ^ c[1]]
//         },
//         x64Fmix: function(a) {
//             a = this.x64Xor(a, [0, a[0] >>> 1]);
//             a = this.x64Multiply(a, [4283543511, 3981806797]);
//             a = this.x64Xor(a, [0, a[0] >>> 1]);
//             a = this.x64Multiply(a, [3301882366, 444984403]);
//             return a = this.x64Xor(a, [0, a[0] >>> 1])
//         },
//         x64hash128: function(a, c) {
//             a = a || "";
//             c = c || 0;
//             var b = a.length % 16,
//             l = a.length - b,
//             e = [0, c];
//             c = [0, c];
//             for (var g, h, u = [2277735313, 289559509], f = [1291169091, 658871167], p = 0; p < l; p += 16) g = [a.charCodeAt(p + 4) & 255 | (a.charCodeAt(p + 5) & 255) << 8 | (a.charCodeAt(p + 6) & 255) << 16 | (a.charCodeAt(p + 7) & 255) << 24, a.charCodeAt(p) & 255 | (a.charCodeAt(p + 1) & 255) << 8 | (a.charCodeAt(p + 2) & 255) << 16 | (a.charCodeAt(p + 3) & 255) << 24],
//             h = [a.charCodeAt(p + 12) & 255 | (a.charCodeAt(p + 13) & 255) << 8 | (a.charCodeAt(p + 14) & 255) << 16 | (a.charCodeAt(p + 15) & 255) << 24, a.charCodeAt(p + 8) & 255 | (a.charCodeAt(p + 9) & 255) << 8 | (a.charCodeAt(p + 10) & 255) << 16 | (a.charCodeAt(p + 11) & 255) << 24],
//             g = this.x64Multiply(g, u),
//             g = this.x64Rotl(g, 31),
//             g = this.x64Multiply(g, f),
//             e = this.x64Xor(e, g),
//             e = this.x64Rotl(e, 27),
//             e = this.x64Add(e, c),
//             e = this.x64Add(this.x64Multiply(e, [0, 5]), [0, 1390208809]),
//             h = this.x64Multiply(h, f),
//             h = this.x64Rotl(h, 33),
//             h = this.x64Multiply(h, u),
//             c = this.x64Xor(c, h),
//             c = this.x64Rotl(c, 31),
//             c = this.x64Add(c, e),
//             c = this.x64Add(this.x64Multiply(c, [0, 5]), [0, 944331445]);
//             g = [0, 0];
//             h = [0, 0];
//             switch (b) {
//             case 15:
//                 h = this.x64Xor(h, this.x64LeftShift([0, a.charCodeAt(p + 14)], 48));
//             case 14:
//                 h = this.x64Xor(h, this.x64LeftShift([0, a.charCodeAt(p + 13)], 40));
//             case 13:
//                 h = this.x64Xor(h, this.x64LeftShift([0, a.charCodeAt(p + 12)], 32));
//             case 12:
//                 h = this.x64Xor(h, this.x64LeftShift([0, a.charCodeAt(p + 11)], 24));
//             case 11:
//                 h = this.x64Xor(h, this.x64LeftShift([0, a.charCodeAt(p + 10)], 16));
//             case 10:
//                 h = this.x64Xor(h, this.x64LeftShift([0, a.charCodeAt(p + 9)], 8));
//             case 9:
//                 h = this.x64Xor(h, [0, a.charCodeAt(p + 8)]),
//                 h = this.x64Multiply(h, f),
//                 h = this.x64Rotl(h, 33),
//                 h = this.x64Multiply(h, u),
//                 c = this.x64Xor(c, h);
//             case 8:
//                 g = this.x64Xor(g, this.x64LeftShift([0, a.charCodeAt(p + 7)], 56));
//             case 7:
//                 g = this.x64Xor(g, this.x64LeftShift([0, a.charCodeAt(p + 6)], 48));
//             case 6:
//                 g = this.x64Xor(g, this.x64LeftShift([0, a.charCodeAt(p + 5)], 40));
//             case 5:
//                 g = this.x64Xor(g, this.x64LeftShift([0, a.charCodeAt(p + 4)], 32));
//             case 4:
//                 g = this.x64Xor(g, this.x64LeftShift([0, a.charCodeAt(p + 3)], 24));
//             case 3:
//                 g = this.x64Xor(g, this.x64LeftShift([0, a.charCodeAt(p + 2)], 16));
//             case 2:
//                 g = this.x64Xor(g, this.x64LeftShift([0, a.charCodeAt(p + 1)], 8));
//             case 1:
//                 g = this.x64Xor(g, [0, a.charCodeAt(p)]),
//                 g = this.x64Multiply(g, u),
//                 g = this.x64Rotl(g, 31),
//                 g = this.x64Multiply(g, f),
//                 e = this.x64Xor(e, g)
//             }
//             e = this.x64Xor(e, [0, a.length]);
//             c = this.x64Xor(c, [0, a.length]);
//             e = this.x64Add(e, c);
//             c = this.x64Add(c, e);
//             e = this.x64Fmix(e);
//             c = this.x64Fmix(c);
//             e = this.x64Add(e, c);
//             c = this.x64Add(c, e);
//             return ("00000000" + (e[0] >>> 0).toString(16)).slice( - 8) + ("00000000" + (e[1] >>> 0).toString(16)).slice( - 8) + ("00000000" + (c[0] >>> 0).toString(16)).slice( - 8) + ("00000000" + (c[1] >>> 0).toString(16)).slice( - 8)
//         }
//     };
//     return t
// });
// var CryptoJS = CryptoJS ||
// function(t, a) {
//     var c = {},
//     b = c.lib = {},
//     l = function() {},
//     e = b.Base = {
//         extend: function(a) {
//             l.prototype = this;
//             var b = new l;
//             a && b.mixIn(a);
//             b.hasOwnProperty("init") || (b.init = function() {
//                 b.$super.init.apply(this, arguments)
//             });
//             b.init.prototype = b;
//             b.$super = this;
//             return b
//         },
//         create: function() {
//             var a = this.extend();
//             a.init.apply(a, arguments);
//             return a
//         },
//         init: function() {},
//         mixIn: function(a) {
//             for (var b in a) a.hasOwnProperty(b) && (this[b] = a[b]);
//             a.hasOwnProperty("toString") && (this.toString = a.toString)
//         },
//         clone: function() {
//             return this.init.prototype.extend(this)
//         }
//     },
//     g = b.WordArray = e.extend({
//         init: function(b, c) {
//             b = this.words = b || [];
//             this.sigBytes = c != a ? c: 4 * b.length
//         },
//         toString: function(a) {
//             return (a || u).stringify(this)
//         },
//         concat: function(a) {
//             var b = this.words,
//             c = a.words,
//             d = this.sigBytes;
//             a = a.sigBytes;
//             this.clamp();
//             if (d % 4) for (var q = 0; q < a; q++) b[d + q >>> 2] |= (c[q >>> 2] >>> 24 - q % 4 * 8 & 255) << 24 - (d + q) % 4 * 8;
//             else if (65535 < c.length) for (q = 0; q < a; q += 4) b[d + q >>> 2] = c[q >>> 2];
//             else b.push.apply(b, c);
//             this.sigBytes += a;
//             return this
//         },
//         clamp: function() {
//             var a = this.words,
//             b = this.sigBytes;
//             a[b >>> 2] &= 4294967295 << 32 - b % 4 * 8;
//             a.length = t.ceil(b / 4)
//         },
//         clone: function() {
//             var a = e.clone.call(this);
//             a.words = this.words.slice(0);
//             return a
//         },
//         random: function(a) {
//             for (var b = [], c = 0; c < a; c += 4) b.push(4294967296 * t.random() | 0);
//             return new g.init(b, a)
//         }
//     }),
//     h = c.enc = {},
//     u = h.Hex = {
//         stringify: function(a) {
//             var b = a.words;
//             a = a.sigBytes;
//             for (var c = [], d = 0; d < a; d++) {
//                 var q = b[d >>> 2] >>> 24 - d % 4 * 8 & 255;
//                 c.push((q >>> 4).toString(16));
//                 c.push((q & 15).toString(16))
//             }
//             return c.join("")
//         },
//         parse: function(a) {
//             for (var b = a.length,
//             c = [], d = 0; d < b; d += 2) c[d >>> 3] |= parseInt(a.substr(d, 2), 16) << 24 - d % 8 * 4;
//             return new g.init(c, b / 2)
//         }
//     },
//     f = h.Latin1 = {
//         stringify: function(a) {
//             var b = a.words;
//             a = a.sigBytes;
//             for (var c = [], d = 0; d < a; d++) c.push(String.fromCharCode(b[d >>> 2] >>> 24 - d % 4 * 8 & 255));
//             return c.join("")
//         },
//         parse: function(a) {
//             for (var b = a.length,
//             c = [], d = 0; d < b; d++) c[d >>> 2] |= (a.charCodeAt(d) & 255) << 24 - d % 4 * 8;
//             return new g.init(c, b)
//         }
//     },
//     p = h.Utf8 = {
//         stringify: function(a) {
//             try {
//                 return decodeURIComponent(escape(f.stringify(a)))
//             } catch(w) {
//                 throw Error("Malformed UTF-8 data");
//             }
//         },
//         parse: function(a) {
//             return f.parse(unescape(encodeURIComponent(a)))
//         }
//     },
//     x = b.BufferedBlockAlgorithm = e.extend({
//         reset: function() {
//             this._data = new g.init;
//             this._nDataBytes = 0
//         },
//         _append: function(a) {
//             "string" == typeof a && (a = p.parse(a));
//             this._data.concat(a);
//             this._nDataBytes += a.sigBytes
//         },
//         _process: function(a) {
//             var b = this._data,
//             c = b.words,
//             d = b.sigBytes,
//             f = this.blockSize,
//             q = d / (4 * f),
//             q = a ? t.ceil(q) : t.max((q | 0) - this._minBufferSize, 0);
//             a = q * f;
//             d = t.min(4 * a, d);
//             if (a) {
//                 for (var e = 0; e < a; e += f) this._doProcessBlock(c, e);
//                 e = c.splice(0, a);
//                 b.sigBytes -= d
//             }
//             return new g.init(e, d)
//         },
//         clone: function() {
//             var a = e.clone.call(this);
//             a._data = this._data.clone();
//             return a
//         },
//         _minBufferSize: 0
//     });
//     b.Hasher = x.extend({
//         cfg: e.extend(),
//         init: function(a) {
//             this.cfg = this.cfg.extend(a);
//             this.reset()
//         },
//         reset: function() {
//             x.reset.call(this);
//             this._doReset()
//         },
//         update: function(a) {
//             this._append(a);
//             this._process();
//             return this
//         },
//         finalize: function(a) {
//             a && this._append(a);
//             return this._doFinalize()
//         },
//         blockSize: 16,
//         _createHelper: function(a) {
//             return function(b, c) {
//                 return (new a.init(c)).finalize(b)
//             }
//         },
//         _createHmacHelper: function(a) {
//             return function(b, c) {
//                 return (new d.HMAC.init(a, c)).finalize(b)
//             }
//         }
//     });
//     var d = c.algo = {};
//     return c
// } (Math); (function() {
//     var t = CryptoJS,
//     a = t.lib.WordArray;
//     t.enc.Base64 = {
//         stringify: function(a) {
//             var b = a.words,
//             c = a.sigBytes,
//             e = this._map;
//             a.clamp();
//             a = [];
//             for (var g = 0; g < c; g += 3) for (var h = (b[g >>> 2] >>> 24 - g % 4 * 8 & 255) << 16 | (b[g + 1 >>> 2] >>> 24 - (g + 1) % 4 * 8 & 255) << 8 | b[g + 2 >>> 2] >>> 24 - (g + 2) % 4 * 8 & 255, u = 0; 4 > u && g + .75 * u < c; u++) a.push(e.charAt(h >>> 6 * (3 - u) & 63));
//             if (b = e.charAt(64)) for (; a.length % 4;) a.push(b);
//             return a.join("")
//         },
//         parse: function(c) {
//             var b = c.length,
//             l = this._map,
//             e = l.charAt(64);
//             e && (e = c.indexOf(e), -1 != e && (b = e));
//             for (var e = [], g = 0, h = 0; h < b; h++) if (h % 4) {
//                 var u = l.indexOf(c.charAt(h - 1)) << h % 4 * 2,
//                 f = l.indexOf(c.charAt(h)) >>> 6 - h % 4 * 2;
//                 e[g >>> 2] |= (u | f) << 24 - g % 4 * 8;
//                 g++
//             }
//             return a.create(e, g)
//         },
//         _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
//     }
// })(); (function(t) {
//     function a(a, b, c, f, r, v, e) {
//         a = a + (b & c | ~b & f) + r + e;
//         return (a << v | a >>> 32 - v) + b
//     }
//     function c(a, b, c, f, r, v, e) {
//         a = a + (b & f | c & ~f) + r + e;
//         return (a << v | a >>> 32 - v) + b
//     }
//     function b(a, b, c, f, r, v, e) {
//         a = a + (b ^ c ^ f) + r + e;
//         return (a << v | a >>> 32 - v) + b
//     }
//     function l(a, b, c, f, r, v, e) {
//         a = a + (c ^ (b | ~f)) + r + e;
//         return (a << v | a >>> 32 - v) + b
//     }
//     for (var e = CryptoJS,
//     g = e.lib,
//     h = g.WordArray,
//     u = g.Hasher,
//     g = e.algo,
//     f = [], p = 0; 64 > p; p++) f[p] = 4294967296 * t.abs(t.sin(p + 1)) | 0;
//     g = g.MD5 = u.extend({
//         _doReset: function() {
//             this._hash = new h.init([1732584193, 4023233417, 2562383102, 271733878])
//         },
//         _doProcessBlock: function(e, d) {
//             for (var g = 0; 16 > g; g++) {
//                 var h = d + g,
//                 r = e[h];
//                 e[h] = (r << 8 | r >>> 24) & 16711935 | (r << 24 | r >>> 8) & 4278255360
//             }
//             var g = this._hash.words,
//             h = e[d + 0],
//             r = e[d + 1],
//             v = e[d + 2],
//             y = e[d + 3],
//             A = e[d + 4],
//             p = e[d + 5],
//             u = e[d + 6],
//             t = e[d + 7],
//             x = e[d + 8],
//             B = e[d + 9],
//             C = e[d + 10],
//             D = e[d + 11],
//             E = e[d + 12],
//             F = e[d + 13],
//             G = e[d + 14];
//             e = e[d + 15];
//             d = g[0];
//             var m = g[1],
//             k = g[2],
//             n = g[3];
//             d = a(d, m, k, n, h, 7, f[0]);
//             n = a(n, d, m, k, r, 12, f[1]);
//             k = a(k, n, d, m, v, 17, f[2]);
//             m = a(m, k, n, d, y, 22, f[3]);
//             d = a(d, m, k, n, A, 7, f[4]);
//             n = a(n, d, m, k, p, 12, f[5]);
//             k = a(k, n, d, m, u, 17, f[6]);
//             m = a(m, k, n, d, t, 22, f[7]);
//             d = a(d, m, k, n, x, 7, f[8]);
//             n = a(n, d, m, k, B, 12, f[9]);
//             k = a(k, n, d, m, C, 17, f[10]);
//             m = a(m, k, n, d, D, 22, f[11]);
//             d = a(d, m, k, n, E, 7, f[12]);
//             n = a(n, d, m, k, F, 12, f[13]);
//             k = a(k, n, d, m, G, 17, f[14]);
//             m = a(m, k, n, d, e, 22, f[15]);
//             d = c(d, m, k, n, r, 5, f[16]);
//             n = c(n, d, m, k, u, 9, f[17]);
//             k = c(k, n, d, m, D, 14, f[18]);
//             m = c(m, k, n, d, h, 20, f[19]);
//             d = c(d, m, k, n, p, 5, f[20]);
//             n = c(n, d, m, k, C, 9, f[21]);
//             k = c(k, n, d, m, e, 14, f[22]);
//             m = c(m, k, n, d, A, 20, f[23]);
//             d = c(d, m, k, n, B, 5, f[24]);
//             n = c(n, d, m, k, G, 9, f[25]);
//             k = c(k, n, d, m, y, 14, f[26]);
//             m = c(m, k, n, d, x, 20, f[27]);
//             d = c(d, m, k, n, F, 5, f[28]);
//             n = c(n, d, m, k, v, 9, f[29]);
//             k = c(k, n, d, m, t, 14, f[30]);
//             m = c(m, k, n, d, E, 20, f[31]);
//             d = b(d, m, k, n, p, 4, f[32]);
//             n = b(n, d, m, k, x, 11, f[33]);
//             k = b(k, n, d, m, D, 16, f[34]);
//             m = b(m, k, n, d, G, 23, f[35]);
//             d = b(d, m, k, n, r, 4, f[36]);
//             n = b(n, d, m, k, A, 11, f[37]);
//             k = b(k, n, d, m, t, 16, f[38]);
//             m = b(m, k, n, d, C, 23, f[39]);
//             d = b(d, m, k, n, F, 4, f[40]);
//             n = b(n, d, m, k, h, 11, f[41]);
//             k = b(k, n, d, m, y, 16, f[42]);
//             m = b(m, k, n, d, u, 23, f[43]);
//             d = b(d, m, k, n, B, 4, f[44]);
//             n = b(n, d, m, k, E, 11, f[45]);
//             k = b(k, n, d, m, e, 16, f[46]);
//             m = b(m, k, n, d, v, 23, f[47]);
//             d = l(d, m, k, n, h, 6, f[48]);
//             n = l(n, d, m, k, t, 10, f[49]);
//             k = l(k, n, d, m, G, 15, f[50]);
//             m = l(m, k, n, d, p, 21, f[51]);
//             d = l(d, m, k, n, E, 6, f[52]);
//             n = l(n, d, m, k, y, 10, f[53]);
//             k = l(k, n, d, m, C, 15, f[54]);
//             m = l(m, k, n, d, r, 21, f[55]);
//             d = l(d, m, k, n, x, 6, f[56]);
//             n = l(n, d, m, k, e, 10, f[57]);
//             k = l(k, n, d, m, u, 15, f[58]);
//             m = l(m, k, n, d, F, 21, f[59]);
//             d = l(d, m, k, n, A, 6, f[60]);
//             n = l(n, d, m, k, D, 10, f[61]);
//             k = l(k, n, d, m, v, 15, f[62]);
//             m = l(m, k, n, d, B, 21, f[63]);
//             g[0] = g[0] + d | 0;
//             g[1] = g[1] + m | 0;
//             g[2] = g[2] + k | 0;
//             g[3] = g[3] + n | 0
//         },
//         _doFinalize: function() {
//             var a = this._data,
//             b = a.words,
//             c = 8 * this._nDataBytes,
//             e = 8 * a.sigBytes;
//             b[e >>> 5] |= 128 << 24 - e % 32;
//             var r = t.floor(c / 4294967296);
//             b[(e + 64 >>> 9 << 4) + 15] = (r << 8 | r >>> 24) & 16711935 | (r << 24 | r >>> 8) & 4278255360;
//             b[(e + 64 >>> 9 << 4) + 14] = (c << 8 | c >>> 24) & 16711935 | (c << 24 | c >>> 8) & 4278255360;
//             a.sigBytes = 4 * (b.length + 1);
//             this._process();
//             a = this._hash;
//             b = a.words;
//             for (c = 0; 4 > c; c++) e = b[c],
//             b[c] = (e << 8 | e >>> 24) & 16711935 | (e << 24 | e >>> 8) & 4278255360;
//             return a
//         },
//         clone: function() {
//             var a = u.clone.call(this);
//             a._hash = this._hash.clone();
//             return a
//         }
//     });
//     e.MD5 = u._createHelper(g);
//     e.HmacMD5 = u._createHmacHelper(g)
// })(Math); (function() {
//     var t = CryptoJS,
//     a = t.lib,
//     c = a.Base,
//     b = a.WordArray,
//     a = t.algo,
//     l = a.EvpKDF = c.extend({
//         cfg: c.extend({
//             keySize: 4,
//             hasher: a.MD5,
//             iterations: 1
//         }),
//         init: function(a) {
//             this.cfg = this.cfg.extend(a)
//         },
//         compute: function(a, c) {
//             for (var e = this.cfg,
//             g = e.hasher.create(), f = b.create(), l = f.words, t = e.keySize, e = e.iterations; l.length < t;) {
//                 d && g.update(d);
//                 var d = g.update(a).finalize(c);
//                 g.reset();
//                 for (var q = 1; q < e; q++) d = g.finalize(d),
//                 g.reset();
//                 f.concat(d)
//             }
//             f.sigBytes = 4 * t;
//             return f
//         }
//     });
//     t.EvpKDF = function(a, b, c) {
//         return l.create(c).compute(a, b)
//     }
// })();
// CryptoJS.lib.Cipher ||
// function(t) {
//     var a = CryptoJS,
//     c = a.lib,
//     b = c.Base,
//     l = c.WordArray,
//     e = c.BufferedBlockAlgorithm,
//     g = a.enc.Base64,
//     h = a.algo.EvpKDF,
//     u = c.Cipher = e.extend({
//         cfg: b.extend(),
//         createEncryptor: function(a, b) {
//             return this.create(this._ENC_XFORM_MODE, a, b)
//         },
//         createDecryptor: function(a, b) {
//             return this.create(this._DEC_XFORM_MODE, a, b)
//         },
//         init: function(a, b, c) {
//             this.cfg = this.cfg.extend(c);
//             this._xformMode = a;
//             this._key = b;
//             this.reset()
//         },
//         reset: function() {
//             e.reset.call(this);
//             this._doReset()
//         },
//         process: function(a) {
//             this._append(a);
//             return this._process()
//         },
//         finalize: function(a) {
//             a && this._append(a);
//             return this._doFinalize()
//         },
//         keySize: 4,
//         ivSize: 4,
//         _ENC_XFORM_MODE: 1,
//         _DEC_XFORM_MODE: 2,
//         _createHelper: function(a) {
//             return {
//                 encrypt: function(b, c, d) {
//                     return ("string" == typeof c ? w: q).encrypt(a, b, c, d)
//                 },
//                 decrypt: function(b, c, d) {
//                     return ("string" == typeof c ? w: q).decrypt(a, b, c, d)
//                 }
//             }
//         }
//     });
//     c.StreamCipher = u.extend({
//         _doFinalize: function() {
//             return this._process(!0)
//         },
//         blockSize: 1
//     });
//     var f = a.mode = {},
//     p = function(a, b, c) {
//         var d = this._iv;
//         d ? this._iv = t: d = this._prevBlock;
//         for (var e = 0; e < c; e++) a[b + e] ^= d[e]
//     },
//     x = (c.BlockCipherMode = b.extend({
//         createEncryptor: function(a, b) {
//             return this.Encryptor.create(a, b)
//         },
//         createDecryptor: function(a, b) {
//             return this.Decryptor.create(a, b)
//         },
//         init: function(a, b) {
//             this._cipher = a;
//             this._iv = b
//         }
//     })).extend();
//     x.Encryptor = x.extend({
//         processBlock: function(a, b) {
//             var c = this._cipher,
//             d = c.blockSize;
//             p.call(this, a, b, d);
//             c.encryptBlock(a, b);
//             this._prevBlock = a.slice(b, b + d)
//         }
//     });
//     x.Decryptor = x.extend({
//         processBlock: function(a, b) {
//             var c = this._cipher,
//             d = c.blockSize,
//             e = a.slice(b, b + d);
//             c.decryptBlock(a, b);
//             p.call(this, a, b, d);
//             this._prevBlock = e
//         }
//     });
//     f = f.CBC = x;
//     x = (a.pad = {}).Pkcs7 = {
//         pad: function(a, b) {
//             b *= 4;
//             b -= a.sigBytes % b;
//             for (var c = b << 24 | b << 16 | b << 8 | b,
//             d = [], e = 0; e < b; e += 4) d.push(c);
//             b = l.create(d, b);
//             a.concat(b)
//         },
//         unpad: function(a) {
//             a.sigBytes -= a.words[a.sigBytes - 1 >>> 2] & 255
//         }
//     };
//     c.BlockCipher = u.extend({
//         cfg: u.cfg.extend({
//             mode: f,
//             padding: x
//         }),
//         reset: function() {
//             u.reset.call(this);
//             var a = this.cfg,
//             b = a.iv,
//             a = a.mode;
//             if (this._xformMode == this._ENC_XFORM_MODE) var c = a.createEncryptor;
//             else c = a.createDecryptor,
//             this._minBufferSize = 1;
//             this._mode = c.call(a, this, b && b.words)
//         },
//         _doProcessBlock: function(a, b) {
//             this._mode.processBlock(a, b)
//         },
//         _doFinalize: function() {
//             var a = this.cfg.padding;
//             if (this._xformMode == this._ENC_XFORM_MODE) {
//                 a.pad(this._data, this.blockSize);
//                 var b = this._process(!0)
//             } else b = this._process(!0),
//             a.unpad(b);
//             return b
//         },
//         blockSize: 4
//     });
//     var d = c.CipherParams = b.extend({
//         init: function(a) {
//             this.mixIn(a)
//         },
//         toString: function(a) {
//             return (a || this.formatter).stringify(this)
//         }
//     }),
//     f = (a.format = {}).OpenSSL = {
//         stringify: function(a) {
//             var b = a.ciphertext;
//             a = a.salt;
//             return (a ? l.create([1398893684, 1701076831]).concat(a).concat(b) : b).toString(g)
//         },
//         parse: function(a) {
//             a = g.parse(a);
//             var b = a.words;
//             if (1398893684 == b[0] && 1701076831 == b[1]) {
//                 var c = l.create(b.slice(2, 4));
//                 b.splice(0, 4);
//                 a.sigBytes -= 16
//             }
//             return d.create({
//                 ciphertext: a,
//                 salt: c
//             })
//         }
//     },
//     q = c.SerializableCipher = b.extend({
//         cfg: b.extend({
//             format: f
//         }),
//         encrypt: function(a, b, c, e) {
//             e = this.cfg.extend(e);
//             var f = a.createEncryptor(c, e);
//             b = f.finalize(b);
//             f = f.cfg;
//             return d.create({
//                 ciphertext: b,
//                 key: c,
//                 iv: f.iv,
//                 algorithm: a,
//                 mode: f.mode,
//                 padding: f.padding,
//                 blockSize: a.blockSize,
//                 formatter: e.format
//             })
//         },
//         decrypt: function(a, b, c, d) {
//             d = this.cfg.extend(d);
//             b = this._parse(b, d.format);
//             return a.createDecryptor(c, d).finalize(b.ciphertext)
//         },
//         _parse: function(a, b) {
//             return "string" == typeof a ? b.parse(a, this) : a
//         }
//     }),
//     a = (a.kdf = {}).OpenSSL = {
//         execute: function(a, b, c, e) {
//             e || (e = l.random(8));
//             a = h.create({
//                 keySize: b + c
//             }).compute(a, e);
//             c = l.create(a.words.slice(b), 4 * c);
//             a.sigBytes = 4 * b;
//             return d.create({
//                 key: a,
//                 iv: c,
//                 salt: e
//             })
//         }
//     },
//     w = c.PasswordBasedCipher = q.extend({
//         cfg: q.cfg.extend({
//             kdf: a
//         }),
//         encrypt: function(a, b, c, d) {
//             d = this.cfg.extend(d);
//             c = d.kdf.execute(c, a.keySize, a.ivSize);
//             d.iv = c.iv;
//             a = q.encrypt.call(this, a, b, c.key, d);
//             a.mixIn(c);
//             return a
//         },
//         decrypt: function(a, b, c, d) {
//             d = this.cfg.extend(d);
//             b = this._parse(b, d.format);
//             c = d.kdf.execute(c, a.keySize, a.ivSize, b.salt);
//             d.iv = c.iv;
//             return q.decrypt.call(this, a, b, c.key, d)
//         }
//     })
// } (); (function() {
//     for (var t = CryptoJS,
//     a = t.lib.BlockCipher,
//     c = t.algo,
//     b = [], l = [], e = [], g = [], h = [], u = [], f = [], p = [], x = [], d = [], q = [], w = 0; 256 > w; w++) q[w] = 128 > w ? w << 1 : w << 1 ^ 283;
//     for (var r = 0,
//     v = 0,
//     w = 0; 256 > w; w++) {
//         var y = v ^ v << 1 ^ v << 2 ^ v << 3 ^ v << 4,
//         y = y >>> 8 ^ y & 255 ^ 99;
//         b[r] = y;
//         l[y] = r;
//         var A = q[r],
//         H = q[A],
//         I = q[H],
//         z = 257 * q[y] ^ 16843008 * y;
//         e[r] = z << 24 | z >>> 8;
//         g[r] = z << 16 | z >>> 16;
//         h[r] = z << 8 | z >>> 24;
//         u[r] = z;
//         z = 16843009 * I ^ 65537 * H ^ 257 * A ^ 16843008 * r;
//         f[y] = z << 24 | z >>> 8;
//         p[y] = z << 16 | z >>> 16;
//         x[y] = z << 8 | z >>> 24;
//         d[y] = z;
//         r ? (r = A ^ q[q[q[I ^ A]]], v ^= q[q[v]]) : r = v = 1
//     }
//     var J = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54],
//     c = c.AES = a.extend({
//         _doReset: function() {
//             for (var a = this._key,
//             c = a.words,
//             e = a.sigBytes / 4,
//             a = 4 * ((this._nRounds = e + 6) + 1), g = this._keySchedule = [], l = 0; l < a; l++) if (l < e) g[l] = c[l];
//             else {
//                 var h = g[l - 1];
//                 l % e ? 6 < e && 4 == l % e && (h = b[h >>> 24] << 24 | b[h >>> 16 & 255] << 16 | b[h >>> 8 & 255] << 8 | b[h & 255]) : (h = h << 8 | h >>> 24, h = b[h >>> 24] << 24 | b[h >>> 16 & 255] << 16 | b[h >>> 8 & 255] << 8 | b[h & 255], h ^= J[l / e | 0] << 24);
//                 g[l] = g[l - e] ^ h
//             }
//             c = this._invKeySchedule = [];
//             for (e = 0; e < a; e++) l = a - e,
//             h = e % 4 ? g[l] : g[l - 4],
//             c[e] = 4 > e || 4 >= l ? h: f[b[h >>> 24]] ^ p[b[h >>> 16 & 255]] ^ x[b[h >>> 8 & 255]] ^ d[b[h & 255]]
//         },
//         encryptBlock: function(a, c) {
//             this._doCryptBlock(a, c, this._keySchedule, e, g, h, u, b)
//         },
//         decryptBlock: function(a, b) {
//             var c = a[b + 1];
//             a[b + 1] = a[b + 3];
//             a[b + 3] = c;
//             this._doCryptBlock(a, b, this._invKeySchedule, f, p, x, d, l);
//             c = a[b + 1];
//             a[b + 1] = a[b + 3];
//             a[b + 3] = c
//         },
//         _doCryptBlock: function(a, b, c, d, e, f, g, k) {
//             for (var l = this._nRounds,
//             h = a[b] ^ c[0], m = a[b + 1] ^ c[1], p = a[b + 2] ^ c[2], q = a[b + 3] ^ c[3], r = 4, t = 1; t < l; t++) var u = d[h >>> 24] ^ e[m >>> 16 & 255] ^ f[p >>> 8 & 255] ^ g[q & 255] ^ c[r++],
//             v = d[m >>> 24] ^ e[p >>> 16 & 255] ^ f[q >>> 8 & 255] ^ g[h & 255] ^ c[r++],
//             w = d[p >>> 24] ^ e[q >>> 16 & 255] ^ f[h >>> 8 & 255] ^ g[m & 255] ^ c[r++],
//             q = d[q >>> 24] ^ e[h >>> 16 & 255] ^ f[m >>> 8 & 255] ^ g[p & 255] ^ c[r++],
//             h = u,
//             m = v,
//             p = w;
//             u = (k[h >>> 24] << 24 | k[m >>> 16 & 255] << 16 | k[p >>> 8 & 255] << 8 | k[q & 255]) ^ c[r++];
//             v = (k[m >>> 24] << 24 | k[p >>> 16 & 255] << 16 | k[q >>> 8 & 255] << 8 | k[h & 255]) ^ c[r++];
//             w = (k[p >>> 24] << 24 | k[q >>> 16 & 255] << 16 | k[h >>> 8 & 255] << 8 | k[m & 255]) ^ c[r++];
//             q = (k[q >>> 24] << 24 | k[h >>> 16 & 255] << 16 | k[m >>> 8 & 255] << 8 | k[p & 255]) ^ c[r++];
//             a[b] = u;
//             a[b + 1] = v;
//             a[b + 2] = w;
//             a[b + 3] = q
//         },
//         keySize: 8
//     });
//     t.AES = a._createHelper(c)
// })();
// var iv = "6532897456985214";
// function meet(m, k, i) {
//     console.log(m, k, i)
//     return eval("CryptoJS.AES.encrypt(m,k,{iv:CryptoJS.enc.Utf8.parse(i),mode:CryptoJS.mode.CBC,padding:CryptoJS.pad.Pkcs7});")
// }
// function writeCookie(t, a, c) {
//     var b = new Date;
//     b.setTime(b.getTime() + 6E4 * c);
//     var aaaaaa = t + "=" + escape(a) + ";path=/;expires=" + b.toGMTString();
//     console.log(aaaaaa)
//     document.cookie = t + "=" + escape(a) + ";path=/;expires=" + b.toGMTString();
//
//     console.log(document.cookie)
//     console.log(c)
// }
// function judge_webkit() {
//     var h = (window["phantom"] ? 1 : 0)["toString"]();
//     var l = (window["callPhantom"] ? 1 : 0)["toString"]();
//     var m = (window["_phantom"] ? 1 : 0)["toString"]();
//     var g = (window["ClientUtils"] ? 1 : 0)["toString"]();
//     var p = (window["__fxdriver_unwrapped"] ? 1 : 0)["toString"]();
//     var w = (window["fxdriver_id"] ? 1 : 0)["toString"]();
//     var y = (document["getElementsByTagName"]("html")[0]["getAttribute"]("webdriver") == null ? 0 : 1)["toString"]();
//     var b = (document["$cdc_asdjflasutopfhvcZLmcfl_"] ? 1 : 0)["toString"]();
//     var M = (document["__webdriver_script_fn"] ? 1 : 0)["toString"]();
//     var C = (window["webdriver"] ? 1 : 0)["toString"]();
//     var I = (window["domAutomation"] ? 1 : 0)["toString"]();
//     var T = (window["Buffer"] ? 1 : 0)["toString"]();
//     var S = (window["emit"] ? 1 : 0)["toString"]();
//     var L = (window["spawn"] ? 1 : 0)["toString"]();
//     var E = [L, S, T, I, C, M, b, y, w, p, g, m, l, h]["join"]("");
//     if (E == "00000000000000") {
//         return false;
//     } else {
//         return true;
//     }
// }
// function get_key() {
//     var auth_url = "/L2YvbmV3dHJhZGUvdGVuZGVycHJvamVjdHMvMzEyNi9mbG93cGFnZWJjNDNmNTE3";
//     var str2 = "asdfghj";
//     var str1 = "5a0c502a87";
//     var str3 = "c247f47db1c819faf3b";
//     var str4 = "ckfrgpd";
//     var str9 = "78b";
//     var str5 = "oejdswq";
//     var str10 = "sdw0oe9";
//     var str30 = "sdawerq";
//     var str7 = "poejcsa";
//     var str12 = "093k4is";
//     var str15 = "9sjfheq";
//     var str11 = "";
//     var str21 = "oejscsw";
//     var str88 = "sdeowmc";
//     if (str9 == str10) {
//         str11 = "skemalf";
//     } else {
//         str11 = "swderfg";
//     }
//     if (str12 == str4) {
//         str12 = str9;
//     } else {
//         str12 = str3;
//     }
//     if (str11 == str30) {
//         str21 = str2;
//     } else {
//         str21 = str1;
//     }
//     if (str30.substring(1, 5) != str1.substring(0, 4)) {
//         str88 = str9;
//     }
//     var fky = str21 + str88 + str12;
//     console.log('fky='+fky);
//     var fksy = CryptoJS.enc.Utf8.parse(fky);
//     console.log('fksy='+fksy);
//     var result1 = {
//         "key": fksy,
//         "uri": auth_url
//     };
//     return result1;
// } (function() {
//     var t = fe();
//     t.get(function(a, c) {
//         var b = "";
//         if ("undefined" !== typeof window.console) for (var l in c) {
//             a = c[l];
//             var e = a.value;
//             if ("canvas" === a.key || "webgl" === a.key) e = t.x64hash128(e, 31);
//             a = e.toString().substr(0, 100) || "unknown";
//             b += a + "_*_"
//         }
//         a = get_key();
//         c = a.key;
//         l = a.uri;
//         b = meet(b.substring(0, b.length - 3), c, iv);
//         writeCookie("wafatclconfirm", b.toString(), 30);
//         writeCookie("wafatcltoken", "", 0);
//         // if (!judge_webkit()) {
//         //     navigator.cookieEnabled ? window.location = l: document.querySelector("#open_cookie").textContent = "Please Enable Cookie."
//         // }
//     })
// })();

// function get_key() {
//     var auth_url = "/L2YvbmV3dHJhZGUvdGVuZGVycHJvamVjdHMvMzEyNi9mbG93cGFnZWJjNDNmNTE3";
//     var str2 = "asdfghj";
//     var str1 = "5a0c502a87";
//     var str3 = "c247f47db1c819faf3b";
//     var str4 = "ckfrgpd";
//     var str9 = "78b";
//     var str5 = "oejdswq";
//     var str10 = "sdw0oe9";
//     var str30 = "sdawerq";
//     var str7 = "poejcsa";
//     var str12 = "093k4is";
//     var str15 = "9sjfheq";
//     var str11 = "";
//     var str21 = "oejscsw";
//     var str88 = "sdeowmc";
//     if (str9 == str10) {
//         str11 = "skemalf";
//     } else {
//         str11 = "swderfg";
//     }
//     if (str12 == str4) {
//         str12 = str9;
//     } else {
//         str12 = str3;
//     }
//     if (str11 == str30) {
//         str21 = str2;
//     } else {
//         str21 = str1;
//     }
//     if (str30.substring(1, 5) != str1.substring(0, 4)) {
//         str88 = str9;
//     }
//     var fky = str21 + str88 + str12;
//     console.log('fky='+fky);
//     var fksy = CryptoJS.enc.Utf8.parse(fky);
//     console.log('fksy='+fksy);
//     var result1 = {
//         "key": fksy,
//         "uri": auth_url
//     };
//     return result1;
// }
//
// function meet(m, k, i) {
//     console.log(m, k, i)
//     return eval("CryptoJS.AES.encrypt(m,k,{iv:CryptoJS.enc.Utf8.parse(i),mode:CryptoJS.mode.CBC,padding:CryptoJS.pad.Pkcs7});")
// }
//
// function writeCookie(t, a, c) {
//     var b = new Date;
//     b.setTime(b.getTime() + 6E4 * c);
//     var aaaaaa = t + "=" + escape(a) + ";path=/;expires=" + b.toGMTString();
//     console.log(aaaaaa)
//     // document.cookie = t + "=" + escape(a) + ";path=/;expires=" + b.toGMTString();
//
//     // console.log(document.cookie)
//     // console.log(c)
// }
// var b = "";
// var iv = "6532897456985214";
//
// var a = get_key();
// var c = a.key;
// var l = a.uri;
// var b = meet(b.substring(0, b.length - 3), c, iv);
// writeCookie("wafatclconfirm", b.toString(), 30);
// writeCookie("wafatcltoken", "", 0);
// console.log(b.toString())
